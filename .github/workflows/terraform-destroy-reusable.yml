# Reusable Terraform Destroy Pipeline
name: 'Reusable Terraform Destroy Pipeline'

on:
  workflow_call:
    inputs:
      environments_dir:
        description: 'Directory containing environments'
        required: false
        type: string
        default: 'environments'
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: 'latest'
      aws_region:
        description: 'AWS region'
        required: true
        type: string
      action:
        description: 'Destroy action to perform'
        required: true
        type: string
      environment:
        description: 'Environment to destroy (leave empty for all)'
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  TERRAFORM_VERSION: ${{ inputs.terraform_version }}
  ENVIRONMENTS_DIR: ${{ inputs.environments_dir }}

permissions:
  contents: read

jobs:
  # Find available environments dynamically
  discover:
    name: 'Discover Environments'
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.discover.outputs.environments }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Discover Environments
      id: discover
      shell: bash
      run: |
        if [ -d "${{ env.ENVIRONMENTS_DIR }}" ]; then
          envs=$(ls -1 ${{ env.ENVIRONMENTS_DIR }}/ | jq -R -s -c 'split("\n")[:-1]')
          echo "environments=$envs" >> $GITHUB_OUTPUT
          echo "Found environments: $envs"
        else
          echo "environments=[]" >> $GITHUB_OUTPUT
          echo "No environments directory found"
        fi

  # Validate Terraform before destroy
  terraform-validate:
    name: 'Validate ${{ matrix.environment }}'
    runs-on: ubuntu-latest
    needs: discover
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ inputs.environment != '' && fromJson(format('["{0}"]', inputs.environment)) || fromJson(needs.discover.outputs.environments) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        set -e
        terraform init -input=false
      working-directory: ./${{ env.ENVIRONMENTS_DIR }}/${{ matrix.environment }}

    - name: Terraform Validate
      run: |
        set -e
        terraform validate
      working-directory: ./${{ env.ENVIRONMENTS_DIR }}/${{ matrix.environment }}

  # Generate destroy plan
  terraform-destroy-plan:
    name: 'Destroy Plan ${{ matrix.environment }}'
    runs-on: ubuntu-latest
    needs: [discover, terraform-validate]
    if: inputs.action == 'destroy-plan' || inputs.action == 'destroy'
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ inputs.environment != '' && fromJson(format('["{0}"]', inputs.environment)) || fromJson(needs.discover.outputs.environments) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        set -e
        terraform init -input=false
      working-directory: ./${{ env.ENVIRONMENTS_DIR }}/${{ matrix.environment }}

    - name: Terraform Destroy Plan
      run: |
        set -e
        terraform plan -destroy -out=destroy-plan
      working-directory: ./${{ env.ENVIRONMENTS_DIR }}/${{ matrix.environment }}

    # Save destroy plan for destroy job
    - name: Upload Destroy Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-destroy-plan-${{ matrix.environment }}
        path: ./${{ env.ENVIRONMENTS_DIR }}/${{ matrix.environment }}/destroy-plan

  # Execute destroy (manual only)
  terraform-destroy:
    name: 'Destroy ${{ matrix.environment }}'
    runs-on: ubuntu-latest
    needs: [discover, terraform-destroy-plan]
    if: inputs.action == 'destroy'
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ inputs.environment != '' && fromJson(format('["{0}"]', inputs.environment)) || fromJson(needs.discover.outputs.environments) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Get destroy plan from previous job
    - name: Download Destroy Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-destroy-plan-${{ matrix.environment }}
        path: ./${{ env.ENVIRONMENTS_DIR }}/${{ matrix.environment }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        set -e
        terraform init -input=false
      working-directory: ./${{ env.ENVIRONMENTS_DIR }}/${{ matrix.environment }}

    - name: Terraform Destroy
      run: |
        set -e
        terraform apply -input=false destroy-plan
      working-directory: ./${{ env.ENVIRONMENTS_DIR }}/${{ matrix.environment }}